// This file was originally generated by the Gtk# (gapi3) code generator.
// It is now maintained by hand.

namespace GI
{

    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Runtime.InteropServices;

#region Autogenerated code
    public partial class VFuncInfo : GI.CallableInfo
    {

        [DllImport ("libgirepository-1.0.dll", CallingConvention = CallingConvention.Cdecl)]
        static extern unsafe IntPtr g_vfunc_info_get_address (IntPtr raw, IntPtr implementorGType, out IntPtr error);

        public unsafe IntPtr GetAddress (GLib.GType implementorGType)
        {
            IntPtr error = IntPtr.Zero;
            IntPtr raw_ret = g_vfunc_info_get_address (Handle, implementorGType.Val, out error);
            IntPtr ret = raw_ret;
            if (error != IntPtr.Zero)
                throw new GLib.GException (error);
            return ret;
        }

        [DllImport ("libgirepository-1.0.dll", CallingConvention = CallingConvention.Cdecl)]
        static extern int g_vfunc_info_get_flags (IntPtr raw);

        public GI.VFuncInfoFlags Flags {
            get {
                int raw_ret = g_vfunc_info_get_flags (Handle);
                GI.VFuncInfoFlags ret = (GI.VFuncInfoFlags)raw_ret;
                return ret;
            }
        }

        [DllImport ("libgirepository-1.0.dll", CallingConvention = CallingConvention.Cdecl)]
        static extern IntPtr g_vfunc_info_get_invoker (IntPtr raw);

        public GI.FunctionInfo Invoker {
            get {
                IntPtr raw_ret = g_vfunc_info_get_invoker (Handle);
                GI.FunctionInfo ret = raw_ret == IntPtr.Zero ? null : (GI.FunctionInfo)GLib.Opaque.GetOpaque (raw_ret, typeof(GI.FunctionInfo), false);
                return ret;
            }
        }

        [DllImport ("libgirepository-1.0.dll", CallingConvention = CallingConvention.Cdecl)]
        static extern int g_vfunc_info_get_offset (IntPtr raw);

        public int Offset {
            get {
                int raw_ret = g_vfunc_info_get_offset (Handle);
                int ret = raw_ret;
                return ret;
            }
        }

        [DllImport ("libgirepository-1.0.dll", CallingConvention = CallingConvention.Cdecl)]
        static extern IntPtr g_vfunc_info_get_signal (IntPtr raw);

        public GI.SignalInfo Signal {
            get {
                IntPtr raw_ret = g_vfunc_info_get_signal (Handle);
                GI.SignalInfo ret = raw_ret == IntPtr.Zero ? null : (GI.SignalInfo)GLib.Opaque.GetOpaque (raw_ret, typeof(GI.SignalInfo), false);
                return ret;
            }
        }

        [DllImport ("libgirepository-1.0.dll", CallingConvention = CallingConvention.Cdecl)]
        static extern unsafe bool g_vfunc_info_invoke (IntPtr raw, IntPtr implementor, GI.Argument[] in_args, int n_in_args, GI.Argument[] out_args, int n_out_args, IntPtr return_value, out IntPtr error);

        public unsafe bool Invoke (GLib.GType implementor, GI.Argument[] in_args, GI.Argument[] out_args, out GI.Argument return_value)
        {
            IntPtr native_return_value = Marshal.AllocHGlobal (Marshal.SizeOf (typeof(GI.Argument)));
            IntPtr error = IntPtr.Zero;
            bool raw_ret = g_vfunc_info_invoke (Handle, implementor.Val, in_args, (in_args == null ? 0 : in_args.Length), out_args, (out_args == null ? 0 : out_args.Length), native_return_value, out error);
            bool ret = raw_ret;
            return_value = GI.Argument.New (native_return_value);
            Marshal.FreeHGlobal (native_return_value);
            if (error != IntPtr.Zero)
                throw new GLib.GException (error);
            return ret;
        }

        public VFuncInfo (IntPtr raw) : base (raw)
        {
        }

#endregion
    }
}
