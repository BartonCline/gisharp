// This file was originally generated by the Gtk# (gapi3) code generator.
// It is now maintained by hand.

namespace GI
{

    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Runtime.InteropServices;

    public static class Repository
    {
        public const string BuiltIn = "<builtin>";

        static NamespaceCollection namespaces;

        internal static InfoCollection<BaseInfo> GetInfos (string @namespace)
        {
            return new InfoCollection<BaseInfo> (() => GetNInfos (@namespace), (i) => GetInfo (@namespace, i));
        }

        public static NamespaceCollection Namespaces {
            get {
                if (namespaces == null)
                    namespaces = new NamespaceCollection ();
                return namespaces;
            }
        }

        [DllImport ("libgirepository-1.0.dll", CallingConvention = CallingConvention.Cdecl)]
        static extern bool g_irepository_dump (IntPtr arg, out IntPtr error);

        public static bool Dump (string arg)
        {
            IntPtr native_arg = MarshalG.StringToUtf8Ptr (arg);
            IntPtr error = IntPtr.Zero;
            bool raw_ret = g_irepository_dump (native_arg, out error);
            bool ret = raw_ret;
            MarshalG.Free (native_arg);
            if (error != IntPtr.Zero)
                throw new GErrorException (error);
            return ret;
        }

        [DllImport ("libgirepository-1.0.dll", CallingConvention = CallingConvention.Cdecl)]
        static extern IntPtr g_irepository_enumerate_versions (IntPtr raw, IntPtr @namespace);

        internal static string[] GetVersions (string @namespace)
        {
            IntPtr native_namespace = MarshalG.StringToUtf8Ptr (@namespace);
            IntPtr raw_ret = g_irepository_enumerate_versions (IntPtr.Zero, native_namespace);
            var ret = MarshalG.GListToStringArray (raw_ret, freePtr: true);
            MarshalG.Free (native_namespace);
            return ret;
        }

        [DllImport ("libgirepository-1.0.dll", CallingConvention = CallingConvention.Cdecl)]
        static extern int g_irepository_error_quark ();

        public static int ErrorDomain {
            get {
                int raw_ret = g_irepository_error_quark ();
                int ret = raw_ret;
                return ret;
            }
        }

        [DllImport ("libgirepository-1.0.dll", CallingConvention = CallingConvention.Cdecl)]
        static extern IntPtr g_irepository_find_by_error_domain (IntPtr raw, int domain);

        public static GI.EnumInfo FindByErrorDomain (int domain)
        {
            IntPtr raw_ret = g_irepository_find_by_error_domain (IntPtr.Zero, domain);
            GI.EnumInfo ret = BaseInfo.MarshalPtr<EnumInfo> (raw_ret);
            return ret;
        }

        [DllImport ("libgirepository-1.0.dll", CallingConvention = CallingConvention.Cdecl)]
        static extern IntPtr g_irepository_find_by_gtype (IntPtr raw, IntPtr gtype);

        public static GI.BaseInfo FindByGType (GLib.GType gtype)
        {
            IntPtr raw_ret = g_irepository_find_by_gtype (IntPtr.Zero, gtype.Val);
            GI.BaseInfo ret = BaseInfo.MarshalPtr<BaseInfo> (raw_ret);
            return ret;
        }

        [DllImport ("libgirepository-1.0.dll", CallingConvention = CallingConvention.Cdecl)]
        static extern IntPtr g_irepository_find_by_name (IntPtr raw, IntPtr @namespace, IntPtr name);

        internal static GI.BaseInfo FindByName (string @namespace, string name)
        {
            IntPtr native_namespace = MarshalG.StringToUtf8Ptr (@namespace);
            IntPtr native_name = MarshalG.StringToUtf8Ptr (name);
            IntPtr raw_ret = g_irepository_find_by_name (IntPtr.Zero, native_namespace, native_name);
            GI.BaseInfo ret = BaseInfo.MarshalPtr<BaseInfo> (raw_ret);
            MarshalG.Free (native_namespace);
            MarshalG.Free (native_name);
            return ret;
        }

        [DllImport ("libgirepository-1.0.dll", CallingConvention = CallingConvention.Cdecl)]
        static extern IntPtr g_irepository_get_c_prefix (IntPtr raw, IntPtr @namespace);

        internal static string GetCPrefix (string @namespace)
        {
            IntPtr native_namespace = MarshalG.StringToUtf8Ptr (@namespace);
            IntPtr raw_ret = g_irepository_get_c_prefix (IntPtr.Zero, native_namespace);
            string ret = MarshalG.Utf8PtrToString (raw_ret);
            MarshalG.Free (native_namespace);
            return ret;
        }

        [DllImport ("libgirepository-1.0.dll", CallingConvention = CallingConvention.Cdecl)]
        static extern IntPtr g_irepository_get_dependencies (IntPtr raw, IntPtr @namespace);

        internal static string[] GetDependencies (string @namespace)
        {
            IntPtr native_namespace = MarshalG.StringToUtf8Ptr (@namespace);
            IntPtr raw_ret = g_irepository_get_dependencies (IntPtr.Zero, native_namespace);
            string[] ret = MarshalG.NullTermPtrToStringArray (raw_ret, false);
            MarshalG.Free (native_namespace);
            return ret;
        }

        [DllImport ("libgirepository-1.0.dll", CallingConvention = CallingConvention.Cdecl)]
        static extern IntPtr g_irepository_get_info (IntPtr raw, IntPtr @namespace, int index);

        internal static GI.BaseInfo GetInfo (string @namespace, int index)
        {
            IntPtr native_namespace = MarshalG.StringToUtf8Ptr (@namespace);
            IntPtr raw_ret = g_irepository_get_info (IntPtr.Zero, native_namespace, index);
            GI.BaseInfo ret = BaseInfo.MarshalPtr<BaseInfo> (raw_ret);
            MarshalG.Free (native_namespace);
            return ret;
        }

        [DllImport ("libgirepository-1.0.dll", CallingConvention = CallingConvention.Cdecl)]
        static extern IntPtr g_irepository_get_loaded_namespaces (IntPtr raw);

        public static string[] LoadedNamespaces {
            get {
                IntPtr raw_ret = g_irepository_get_loaded_namespaces (IntPtr.Zero);
                string[] ret = MarshalG.NullTermPtrToStringArray (raw_ret, false);
                return ret;
            }
        }

        [DllImport ("libgirepository-1.0.dll", CallingConvention = CallingConvention.Cdecl)]
        static extern int g_irepository_get_n_infos (IntPtr raw, IntPtr @namespace);

        static int GetNInfos (string @namespace)
        {
            IntPtr native_namespace = MarshalG.StringToUtf8Ptr (@namespace);
            int raw_ret = g_irepository_get_n_infos (IntPtr.Zero, native_namespace);
            int ret = raw_ret;
            MarshalG.Free (native_namespace);
            return ret;
        }

        [DllImport ("libgirepository-1.0.dll", CallingConvention = CallingConvention.Cdecl)]
        static extern IntPtr g_irepository_get_search_path ();

        public static string[] SearchPath {
            get {
                IntPtr raw_ret = g_irepository_get_search_path ();
                var ret = MarshalG.GSListToStringArray (raw_ret);
                return ret;
            }
        }

        [DllImport ("libgirepository-1.0.dll", CallingConvention = CallingConvention.Cdecl)]
        static extern IntPtr g_irepository_get_shared_library (IntPtr raw, IntPtr @namespace);

        internal static string GetSharedLibrary (string @namespace)
        {
            IntPtr native_namespace = MarshalG.StringToUtf8Ptr (@namespace);
            IntPtr raw_ret = g_irepository_get_shared_library (IntPtr.Zero, native_namespace);
            string ret = MarshalG.Utf8PtrToString (raw_ret);
            MarshalG.Free (native_namespace);
            return ret;
        }

        [DllImport ("libgirepository-1.0.dll", CallingConvention = CallingConvention.Cdecl)]
        static extern IntPtr g_irepository_get_typelib_path (IntPtr raw, IntPtr @namespace);

        internal static string GetTypelibPath (string @namespace)
        {
            IntPtr native_namespace = MarshalG.StringToUtf8Ptr (@namespace);
            IntPtr raw_ret = g_irepository_get_typelib_path (IntPtr.Zero, native_namespace);
            string ret = MarshalG.Utf8PtrToString (raw_ret);
            MarshalG.Free (native_namespace);
            return ret;
        }

        [DllImport ("libgirepository-1.0.dll", CallingConvention = CallingConvention.Cdecl)]
        static extern IntPtr g_irepository_get_version (IntPtr raw, IntPtr @namespace);

        internal static string GetVersion (string @namespace)
        {
            IntPtr native_namespace = MarshalG.StringToUtf8Ptr (@namespace);
            IntPtr raw_ret = g_irepository_get_version (IntPtr.Zero, native_namespace);
            string ret = MarshalG.Utf8PtrToString (raw_ret);
            MarshalG.Free (native_namespace);
            return ret;
        }

        [DllImport ("libgirepository-1.0.dll", CallingConvention = CallingConvention.Cdecl)]
        static extern bool g_irepository_is_registered (IntPtr raw, IntPtr @namespace, IntPtr version);

        public static bool IsRegistered (string @namespace, string version)
        {
            IntPtr native_namespace = MarshalG.StringToUtf8Ptr (@namespace);
            IntPtr native_version = MarshalG.StringToUtf8Ptr (version);
            bool raw_ret = g_irepository_is_registered (IntPtr.Zero, native_namespace, native_version);
            bool ret = raw_ret;
            MarshalG.Free (native_namespace);
            MarshalG.Free (native_version);
            return ret;
        }

        [DllImport ("libgirepository-1.0.dll", CallingConvention = CallingConvention.Cdecl)]
        static extern void g_irepository_prepend_library_path (IntPtr directory);

        public static void PrependLibraryPath (string directory)
        {
            IntPtr native_directory = MarshalG.StringToUtf8Ptr (directory);
            g_irepository_prepend_library_path (native_directory);
            MarshalG.Free (native_directory);
        }

        [DllImport ("libgirepository-1.0.dll", CallingConvention = CallingConvention.Cdecl)]
        static extern void g_irepository_prepend_search_path (IntPtr directory);

        public static void PrependSearchPath (string directory)
        {
            IntPtr native_directory = MarshalG.StringToUtf8Ptr (directory);
            g_irepository_prepend_search_path (native_directory);
            MarshalG.Free (native_directory);
        }

        [DllImport ("libgirepository-1.0.dll", CallingConvention = CallingConvention.Cdecl)]
        static extern IntPtr g_irepository_require (IntPtr raw, IntPtr @namespace, IntPtr version, int flags, out IntPtr error);

        public static void Require (string @namespace, string version, GI.RepositoryLoadFlags flags)
        {
            IntPtr native_namespace = MarshalG.StringToUtf8Ptr (@namespace);
            IntPtr native_version = MarshalG.StringToUtf8Ptr (version);
            IntPtr error = IntPtr.Zero;
            g_irepository_require (IntPtr.Zero, native_namespace, native_version, (int)flags, out error);
            MarshalG.Free (native_namespace);
            MarshalG.Free (native_version);
            if (error != IntPtr.Zero) {
                throw new GErrorException (error);
            }
        }

        [DllImport ("libgirepository-1.0.dll", CallingConvention = CallingConvention.Cdecl)]
        static extern IntPtr g_irepository_require_private (IntPtr raw, IntPtr typelibDir, IntPtr @namespace, IntPtr version, int flags, out IntPtr error);

        public static void RequirePrivate (string typelibDir, string @namespace, string version, GI.RepositoryLoadFlags flags)
        {
            IntPtr native_typelib_dir = MarshalG.StringToUtf8Ptr (typelibDir);
            IntPtr native_namespace = MarshalG.StringToUtf8Ptr (@namespace);
            IntPtr native_version = MarshalG.StringToUtf8Ptr (version);
            IntPtr error = IntPtr.Zero;
            g_irepository_require_private (IntPtr.Zero, native_typelib_dir, native_namespace, native_version, (int)flags, out error);
            MarshalG.Free (native_typelib_dir);
            MarshalG.Free (native_namespace);
            MarshalG.Free (native_version);
            if (error != IntPtr.Zero) {
                throw new GErrorException (error);
            }
        }
    }
}
