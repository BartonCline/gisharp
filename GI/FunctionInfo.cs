// This file was originally generated by the Gtk# (gapi3) code generator.
// It is now maintained by hand.

using System;
using System.Collections;
using System.Collections.Generic;
using System.Runtime.InteropServices;

using GISharp.Core;

namespace GISharp.GI
{
    public class FunctionInfo : CallableInfo
    {
        public bool IsConstructor {
            get {
                return Flags.HasFlag (FunctionInfoFlags.IsConstructor);
            }
        }

        public bool IsGetter {
            get {
                return Flags.HasFlag (FunctionInfoFlags.IsGetter);
            }
        }

        public bool IsSetter {
            get {
                return Flags.HasFlag (FunctionInfoFlags.IsSetter);
            }
        }

        public bool Throws {
            get {
                return Flags.HasFlag (FunctionInfoFlags.Throws);
            }
        }

        public bool WrapsVfunc {
            get {
                return Flags.HasFlag (FunctionInfoFlags.WrapsVfunc);
            }
        }

        [DllImport ("libgirepository-1.0.dll", CallingConvention = CallingConvention.Cdecl)]
        static extern FunctionInfoFlags g_function_info_get_flags (IntPtr raw);

        FunctionInfoFlags Flags {
            get {
                return g_function_info_get_flags (Handle);
            }
        }

        [DllImport ("libgirepository-1.0.dll", CallingConvention = CallingConvention.Cdecl)]
        static extern IntPtr g_function_info_get_property (IntPtr raw);

        public PropertyInfo Property {
            get {
                IntPtr raw_ret = g_function_info_get_property (Handle);
                return MarshalPtr<PropertyInfo> (raw_ret);
            }
        }

        [DllImport ("libgirepository-1.0.dll", CallingConvention = CallingConvention.Cdecl)]
        static extern IntPtr g_function_info_get_symbol (IntPtr raw);

        public string Symbol {
            get {
                IntPtr raw_ret = g_function_info_get_symbol (Handle);
                return MarshalG.Utf8PtrToString (raw_ret);
            }
        }

        [DllImport ("libgirepository-1.0.dll", CallingConvention = CallingConvention.Cdecl)]
        static extern IntPtr g_function_info_get_vfunc (IntPtr raw);

        public VFuncInfo VFunc {
            get {
                IntPtr raw_ret = g_function_info_get_vfunc (Handle);
                return MarshalPtr<VFuncInfo> (raw_ret);
            }
        }

        [DllImport ("libgirepository-1.0.dll", CallingConvention = CallingConvention.Cdecl)]
        static extern unsafe bool g_function_info_invoke (IntPtr raw, Argument[] inArgs, int nInArgs, Argument[] outArgs, int nOutArgs, out Argument returnValue, out IntPtr error);

        public unsafe void Invoke (Argument[] inArgs, Argument[] outArgs, out Argument returnValue)
        {
            IntPtr error;
            g_function_info_invoke (Handle, inArgs, (inArgs == null ? 0 : inArgs.Length), outArgs, (outArgs == null ? 0 : outArgs.Length), out returnValue, out error);
            if (error != IntPtr.Zero) {
                throw new GErrorException (error);
            }
        }

        public FunctionInfo (IntPtr raw) : base (raw)
        {
        }
    }
}
