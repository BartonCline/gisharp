// This file was originally generated by the Gtk# (gapi3) code generator.
// It is now maintained by hand.

namespace GI
{

    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Runtime.InteropServices;

#region Autogenerated code
    public partial class ObjectInfo : GI.RegisteredTypeInfo, IMethodContainer
    {

        InfoCollection<ConstantInfo> constants;

        public InfoCollection<ConstantInfo> Constants {
            get {
                if (constants == null) {
                    constants = new InfoCollection<ConstantInfo> (() => NConstants, GetConstant);
                }
                return constants;
            }
        }

        InfoCollection<FieldInfo> fields;

        public InfoCollection<FieldInfo> Fields {
            get {
                if (fields == null) {
                    fields = new InfoCollection<FieldInfo> (() => NFields, GetField);
                }
                return fields;
            }
        }

        InfoCollection<InterfaceInfo> interfaces;

        public InfoCollection<InterfaceInfo> Interfaces {
            get {
                if (interfaces == null) {
                    interfaces = new InfoCollection<InterfaceInfo> (() => NInterfaces, GetInterface);
                }
                return interfaces;
            }
        }

        InfoCollection<FunctionInfo> methods;

        public InfoCollection<FunctionInfo> Methods {
            get {
                if (methods == null) {
                    methods = new InfoCollection<FunctionInfo> (() => NMethods, GetMethod);
                }
                return methods;
            }
        }

        InfoCollection<PropertyInfo> properties;

        public InfoCollection<PropertyInfo> Properties {
            get {
                if (properties == null) {
                    properties = new InfoCollection<PropertyInfo> (() => NProperties, GetProperty);
                }
                return properties;
            }
        }

        InfoCollection<SignalInfo> signals;

        public InfoCollection<SignalInfo> Signals {
            get {
                if (signals == null) {
                    signals = new InfoCollection<SignalInfo> (() => NSignals, GetSignal);
                }
                return signals;
            }
        }

        InfoCollection<VFuncInfo> vFuncs;

        public InfoCollection<VFuncInfo> VFuncs {
            get {
                if (vFuncs == null) {
                    vFuncs = new InfoCollection<VFuncInfo> (() => NVfuncs, GetVFunc);
                }
                return vFuncs;
            }
        }

        [DllImport ("libgirepository-1.0.dll", CallingConvention = CallingConvention.Cdecl)]
        static extern IntPtr g_object_info_find_method (IntPtr raw, IntPtr name);

        public GI.FunctionInfo FindMethod (string name)
        {
            IntPtr native_name = GLib.Marshaller.StringToPtrGStrdup (name);
            IntPtr raw_ret = g_object_info_find_method (Handle, native_name);
            GI.FunctionInfo ret = MarshalPtr<FunctionInfo> (raw_ret);
            GLib.Marshaller.Free (native_name);
            return ret;
        }

        [DllImport ("libgirepository-1.0.dll", CallingConvention = CallingConvention.Cdecl)]
        static extern IntPtr g_object_info_find_method_using_interfaces (IntPtr raw, IntPtr name, IntPtr implementor);

        public GI.FunctionInfo FindMethodUsingInterfaces (string name, GI.ObjectInfo implementor)
        {
            IntPtr native_name = GLib.Marshaller.StringToPtrGStrdup (name);
            IntPtr raw_ret = g_object_info_find_method_using_interfaces (Handle, native_name, implementor == null ? IntPtr.Zero : implementor.Handle);
            GI.FunctionInfo ret = MarshalPtr<FunctionInfo> (raw_ret);
            GLib.Marshaller.Free (native_name);
            return ret;
        }

        [DllImport ("libgirepository-1.0.dll", CallingConvention = CallingConvention.Cdecl)]
        static extern IntPtr g_object_info_find_signal (IntPtr raw, IntPtr name);

        public GI.SignalInfo FindSignal (string name)
        {
            IntPtr native_name = GLib.Marshaller.StringToPtrGStrdup (name);
            IntPtr raw_ret = g_object_info_find_signal (Handle, native_name);
            GI.SignalInfo ret = MarshalPtr<SignalInfo> (raw_ret);
            GLib.Marshaller.Free (native_name);
            return ret;
        }

        [DllImport ("libgirepository-1.0.dll", CallingConvention = CallingConvention.Cdecl)]
        static extern IntPtr g_object_info_find_vfunc (IntPtr raw, IntPtr name);

        public GI.VFuncInfo FindVFunc (string name)
        {
            IntPtr native_name = GLib.Marshaller.StringToPtrGStrdup (name);
            IntPtr raw_ret = g_object_info_find_vfunc (Handle, native_name);
            GI.VFuncInfo ret = MarshalPtr<VFuncInfo> (raw_ret);
            GLib.Marshaller.Free (native_name);
            return ret;
        }

        [DllImport ("libgirepository-1.0.dll", CallingConvention = CallingConvention.Cdecl)]
        static extern IntPtr g_object_info_find_vfunc_using_interfaces (IntPtr raw, IntPtr name, IntPtr implementor);

        public GI.VFuncInfo FindVFuncUsingInterfaces (string name, GI.ObjectInfo implementor)
        {
            IntPtr native_name = GLib.Marshaller.StringToPtrGStrdup (name);
            IntPtr raw_ret = g_object_info_find_vfunc_using_interfaces (Handle, native_name, implementor == null ? IntPtr.Zero : implementor.Handle);
            GI.VFuncInfo ret = MarshalPtr<VFuncInfo> (raw_ret);
            GLib.Marshaller.Free (native_name);
            return ret;
        }

        [DllImport ("libgirepository-1.0.dll", CallingConvention = CallingConvention.Cdecl)]
        static extern bool g_object_info_get_abstract (IntPtr raw);

        public bool Abstract {
            get {
                bool raw_ret = g_object_info_get_abstract (Handle);
                bool ret = raw_ret;
                return ret;
            }
        }

        [DllImport ("libgirepository-1.0.dll", CallingConvention = CallingConvention.Cdecl)]
        static extern IntPtr g_object_info_get_class_struct (IntPtr raw);

        public GI.StructInfo ClassStruct {
            get {
                IntPtr raw_ret = g_object_info_get_class_struct (Handle);
                GI.StructInfo ret = MarshalPtr<StructInfo> (raw_ret);
                return ret;
            }
        }

        [DllImport ("libgirepository-1.0.dll", CallingConvention = CallingConvention.Cdecl)]
        static extern IntPtr g_object_info_get_constant (IntPtr raw, int index);

        protected GI.ConstantInfo GetConstant (int index)
        {
            IntPtr raw_ret = g_object_info_get_constant (Handle, index);
            GI.ConstantInfo ret = MarshalPtr<ConstantInfo> (raw_ret);
            return ret;
        }

        [DllImport ("libgirepository-1.0.dll", CallingConvention = CallingConvention.Cdecl)]
        static extern IntPtr g_object_info_get_field (IntPtr raw, int index);

        protected GI.FieldInfo GetField (int index)
        {
            IntPtr raw_ret = g_object_info_get_field (Handle, index);
            GI.FieldInfo ret = MarshalPtr<FieldInfo> (raw_ret);
            return ret;
        }

        [DllImport ("libgirepository-1.0.dll", CallingConvention = CallingConvention.Cdecl)]
        static extern bool g_object_info_get_fundamental (IntPtr raw);

        public bool Fundamental {
            get {
                bool raw_ret = g_object_info_get_fundamental (Handle);
                bool ret = raw_ret;
                return ret;
            }
        }

        [DllImport ("libgirepository-1.0.dll", CallingConvention = CallingConvention.Cdecl)]
        static extern IntPtr g_object_info_get_get_value_function (IntPtr raw);

        public string GetValueFunctionName {
            get {
                IntPtr raw_ret = g_object_info_get_get_value_function (Handle);
                string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
                return ret;
            }
        }

        [DllImport ("libgirepository-1.0.dll", CallingConvention = CallingConvention.Cdecl)]
        static extern GISharp.ObjectInfoGetValueFunctionNative g_object_info_get_get_value_function_pointer (IntPtr raw);

        public GI.ObjectInfoGetValueFunction GetValueFunction {
            get {
                GISharp.ObjectInfoGetValueFunctionNative raw_ret = g_object_info_get_get_value_function_pointer (Handle);
                GI.ObjectInfoGetValueFunction ret = GISharp.ObjectInfoGetValueFunctionWrapper.GetManagedDelegate (raw_ret);
                return ret;
            }
        }

        [DllImport ("libgirepository-1.0.dll", CallingConvention = CallingConvention.Cdecl)]
        static extern IntPtr g_object_info_get_interface (IntPtr raw, int index);

        protected GI.InterfaceInfo GetInterface (int index)
        {
            IntPtr raw_ret = g_object_info_get_interface (Handle, index);
            GI.InterfaceInfo ret = MarshalPtr<InterfaceInfo> (raw_ret);
            return ret;
        }

        [DllImport ("libgirepository-1.0.dll", CallingConvention = CallingConvention.Cdecl)]
        static extern IntPtr g_object_info_get_method (IntPtr raw, int index);

        protected GI.FunctionInfo GetMethod (int index)
        {
            IntPtr raw_ret = g_object_info_get_method (Handle, index);
            GI.FunctionInfo ret = MarshalPtr<FunctionInfo> (raw_ret);
            return ret;
        }

        [DllImport ("libgirepository-1.0.dll", CallingConvention = CallingConvention.Cdecl)]
        static extern int g_object_info_get_n_constants (IntPtr raw);

        protected int NConstants {
            get {
                int raw_ret = g_object_info_get_n_constants (Handle);
                int ret = raw_ret;
                return ret;
            }
        }

        [DllImport ("libgirepository-1.0.dll", CallingConvention = CallingConvention.Cdecl)]
        static extern int g_object_info_get_n_fields (IntPtr raw);

        protected int NFields {
            get {
                int raw_ret = g_object_info_get_n_fields (Handle);
                int ret = raw_ret;
                return ret;
            }
        }

        [DllImport ("libgirepository-1.0.dll", CallingConvention = CallingConvention.Cdecl)]
        static extern int g_object_info_get_n_interfaces (IntPtr raw);

        protected int NInterfaces {
            get {
                int raw_ret = g_object_info_get_n_interfaces (Handle);
                int ret = raw_ret;
                return ret;
            }
        }

        [DllImport ("libgirepository-1.0.dll", CallingConvention = CallingConvention.Cdecl)]
        static extern int g_object_info_get_n_methods (IntPtr raw);

        protected int NMethods {
            get {
                int raw_ret = g_object_info_get_n_methods (Handle);
                int ret = raw_ret;
                return ret;
            }
        }

        [DllImport ("libgirepository-1.0.dll", CallingConvention = CallingConvention.Cdecl)]
        static extern int g_object_info_get_n_properties (IntPtr raw);

        protected int NProperties {
            get {
                int raw_ret = g_object_info_get_n_properties (Handle);
                int ret = raw_ret;
                return ret;
            }
        }

        [DllImport ("libgirepository-1.0.dll", CallingConvention = CallingConvention.Cdecl)]
        static extern int g_object_info_get_n_signals (IntPtr raw);

        protected int NSignals {
            get {
                int raw_ret = g_object_info_get_n_signals (Handle);
                int ret = raw_ret;
                return ret;
            }
        }

        [DllImport ("libgirepository-1.0.dll", CallingConvention = CallingConvention.Cdecl)]
        static extern int g_object_info_get_n_vfuncs (IntPtr raw);

        protected int NVfuncs {
            get {
                int raw_ret = g_object_info_get_n_vfuncs (Handle);
                int ret = raw_ret;
                return ret;
            }
        }

        [DllImport ("libgirepository-1.0.dll", CallingConvention = CallingConvention.Cdecl)]
        static extern IntPtr g_object_info_get_parent (IntPtr raw);

        public GI.ObjectInfo Parent {
            get {
                IntPtr raw_ret = g_object_info_get_parent (Handle);
                GI.ObjectInfo ret = MarshalPtr<ObjectInfo> (raw_ret);
                return ret;
            }
        }

        [DllImport ("libgirepository-1.0.dll", CallingConvention = CallingConvention.Cdecl)]
        static extern IntPtr g_object_info_get_property (IntPtr raw, int index);

        protected GI.PropertyInfo GetProperty (int index)
        {
            IntPtr raw_ret = g_object_info_get_property (Handle, index);
            GI.PropertyInfo ret = MarshalPtr<PropertyInfo> (raw_ret);
            return ret;
        }

        [DllImport ("libgirepository-1.0.dll", CallingConvention = CallingConvention.Cdecl)]
        static extern IntPtr g_object_info_get_ref_function (IntPtr raw);

        public string RefFunctionName {
            get {
                IntPtr raw_ret = g_object_info_get_ref_function (Handle);
                string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
                return ret;
            }
        }

        [DllImport ("libgirepository-1.0.dll", CallingConvention = CallingConvention.Cdecl)]
        static extern GISharp.ObjectInfoRefFunctionNative g_object_info_get_ref_function_pointer (IntPtr raw);

        public GI.ObjectInfoRefFunction RefFunction {
            get {
                GISharp.ObjectInfoRefFunctionNative raw_ret = g_object_info_get_ref_function_pointer (Handle);
                GI.ObjectInfoRefFunction ret = GISharp.ObjectInfoRefFunctionWrapper.GetManagedDelegate (raw_ret);
                return ret;
            }
        }

        [DllImport ("libgirepository-1.0.dll", CallingConvention = CallingConvention.Cdecl)]
        static extern IntPtr g_object_info_get_set_value_function (IntPtr raw);

        public string SetValueFunctionName {
            get {
                IntPtr raw_ret = g_object_info_get_set_value_function (Handle);
                string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
                return ret;
            }
        }

        [DllImport ("libgirepository-1.0.dll", CallingConvention = CallingConvention.Cdecl)]
        static extern GISharp.ObjectInfoSetValueFunctionNative g_object_info_get_set_value_function_pointer (IntPtr raw);

        public GI.ObjectInfoSetValueFunction SetValueFunction {
            get {
                GISharp.ObjectInfoSetValueFunctionNative raw_ret = g_object_info_get_set_value_function_pointer (Handle);
                GI.ObjectInfoSetValueFunction ret = GISharp.ObjectInfoSetValueFunctionWrapper.GetManagedDelegate (raw_ret);
                return ret;
            }
        }

        [DllImport ("libgirepository-1.0.dll", CallingConvention = CallingConvention.Cdecl)]
        static extern IntPtr g_object_info_get_signal (IntPtr raw, int index);

        protected GI.SignalInfo GetSignal (int index)
        {
            IntPtr raw_ret = g_object_info_get_signal (Handle, index);
            GI.SignalInfo ret = MarshalPtr<SignalInfo> (raw_ret);
            return ret;
        }

        [DllImport ("libgirepository-1.0.dll", CallingConvention = CallingConvention.Cdecl)]
        static extern IntPtr g_object_info_get_type_init (IntPtr raw);

        public new string TypeInit {
            get {
                IntPtr raw_ret = g_object_info_get_type_init (Handle);
                string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
                return ret;
            }
        }

        [DllImport ("libgirepository-1.0.dll", CallingConvention = CallingConvention.Cdecl)]
        static extern IntPtr g_object_info_get_type_name (IntPtr raw);

        public new string TypeName {
            get {
                IntPtr raw_ret = g_object_info_get_type_name (Handle);
                string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
                return ret;
            }
        }

        [DllImport ("libgirepository-1.0.dll", CallingConvention = CallingConvention.Cdecl)]
        static extern IntPtr g_object_info_get_unref_function (IntPtr raw);

        public string UnrefFunctionName {
            get {
                IntPtr raw_ret = g_object_info_get_unref_function (Handle);
                string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
                return ret;
            }
        }

        [DllImport ("libgirepository-1.0.dll", CallingConvention = CallingConvention.Cdecl)]
        static extern GISharp.ObjectInfoUnrefFunctionNative g_object_info_get_unref_function_pointer (IntPtr raw);

        public GI.ObjectInfoUnrefFunction UnrefFunction {
            get {
                GISharp.ObjectInfoUnrefFunctionNative raw_ret = g_object_info_get_unref_function_pointer (Handle);
                GI.ObjectInfoUnrefFunction ret = GISharp.ObjectInfoUnrefFunctionWrapper.GetManagedDelegate (raw_ret);
                return ret;
            }
        }

        [DllImport ("libgirepository-1.0.dll", CallingConvention = CallingConvention.Cdecl)]
        static extern IntPtr g_object_info_get_vfunc (IntPtr raw, int index);

        protected GI.VFuncInfo GetVFunc (int index)
        {
            IntPtr raw_ret = g_object_info_get_vfunc (Handle, index);
            GI.VFuncInfo ret = MarshalPtr<VFuncInfo> (raw_ret);
            return ret;
        }

        public ObjectInfo (IntPtr raw) : base (raw)
        {
        }

#endregion
    }
}
