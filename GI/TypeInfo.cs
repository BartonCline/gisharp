// This file was originally generated by the Gtk# (gapi3) code generator.
// It is now maintained by hand.

namespace GI
{

    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Runtime.InteropServices;

#region Autogenerated code
    public partial class TypeInfo : GI.BaseInfo
    {

        [DllImport ("libgirepository-1.0.dll", CallingConvention = CallingConvention.Cdecl)]
        static extern int g_type_info_get_array_fixed_size (IntPtr raw);

        public int ArrayFixedSize {
            get {
                int raw_ret = g_type_info_get_array_fixed_size (Handle);
                int ret = raw_ret;
                return ret;
            }
        }

        [DllImport ("libgirepository-1.0.dll", CallingConvention = CallingConvention.Cdecl)]
        static extern int g_type_info_get_array_length (IntPtr raw);

        public int ArrayLength {
            get {
                int raw_ret = g_type_info_get_array_length (Handle);
                int ret = raw_ret;
                return ret;
            }
        }

        [DllImport ("libgirepository-1.0.dll", CallingConvention = CallingConvention.Cdecl)]
        static extern int g_type_info_get_array_type (IntPtr raw);

        public GI.ArrayType ArrayType {
            get {
                int raw_ret = g_type_info_get_array_type (Handle);
                GI.ArrayType ret = (GI.ArrayType)raw_ret;
                return ret;
            }
        }

        [DllImport ("libgirepository-1.0.dll", CallingConvention = CallingConvention.Cdecl)]
        static extern IntPtr g_type_info_get_interface (IntPtr raw);

        public GI.BaseInfo Interface {
            get {
                IntPtr raw_ret = g_type_info_get_interface (Handle);
                GI.BaseInfo ret = GI.BaseInfo.MarshalPtr (raw_ret);
                return ret;
            }
        }

        [DllImport ("libgirepository-1.0.dll", CallingConvention = CallingConvention.Cdecl)]
        static extern IntPtr g_type_info_get_param_type (IntPtr raw, int index);

        public GI.TypeInfo GetParamType (int index)
        {
            IntPtr raw_ret = g_type_info_get_param_type (Handle, index);
            GI.TypeInfo ret = raw_ret == IntPtr.Zero ? null : (GI.TypeInfo)GLib.Opaque.GetOpaque (raw_ret, typeof(GI.TypeInfo), false);
            return ret;
        }

        [DllImport ("libgirepository-1.0.dll", CallingConvention = CallingConvention.Cdecl)]
        static extern int g_type_info_get_tag (IntPtr raw);

        public GI.TypeTag Tag {
            get {
                int raw_ret = g_type_info_get_tag (Handle);
                GI.TypeTag ret = (GI.TypeTag)raw_ret;
                return ret;
            }
        }

        [DllImport ("libgirepository-1.0.dll", CallingConvention = CallingConvention.Cdecl)]
        static extern bool g_type_info_is_pointer (IntPtr raw);

        public bool IsPointer {
            get {
                bool raw_ret = g_type_info_is_pointer (Handle);
                bool ret = raw_ret;
                return ret;
            }
        }

        [DllImport ("libgirepository-1.0.dll", CallingConvention = CallingConvention.Cdecl)]
        static extern bool g_type_info_is_zero_terminated (IntPtr raw);

        public bool IsZeroTerminated {
            get {
                bool raw_ret = g_type_info_is_zero_terminated (Handle);
                bool ret = raw_ret;
                return ret;
            }
        }

        public TypeInfo (IntPtr raw) : base (raw)
        {
        }

#endregion
    }
}
