// This file was generated by the Gtk# code generator.
// It is now maintained by hand.

using System;
using System.Collections;
using System.Collections.Generic;
using System.Runtime.InteropServices;

using GISharp.Core;

namespace GISharp.GI
{
    public class UnionInfo : RegisteredTypeInfo, IMethodContainer
    {
        IndexedCollection<FieldInfo> fields;

        public IndexedCollection<FieldInfo> Fields {
            get {
                if (fields == null) {
                    fields = new IndexedCollection<FieldInfo> (() => NFields, GetField);
                }
                return fields;
            }
        }

        IndexedCollection<FunctionInfo> methods;

        public IndexedCollection<FunctionInfo> Methods {
            get {
                if (methods == null) {
                    methods = new IndexedCollection<FunctionInfo> (() => NMethods, GetMethod);
                }
                return methods;
            }
        }

        [DllImport ("libgirepository-1.0.dll", CallingConvention = CallingConvention.Cdecl)]
        static extern IntPtr g_union_info_find_method (IntPtr raw, IntPtr name);

        public FunctionInfo FindMethod (string name)
        {
            IntPtr native_name = MarshalG.StringToUtf8Ptr (name);
            IntPtr raw_ret = g_union_info_find_method (Handle, native_name);
            FunctionInfo ret = MarshalPtr<FunctionInfo> (raw_ret);
            MarshalG.Free (native_name);
            return ret;
        }

        [DllImport ("libgirepository-1.0.dll", CallingConvention = CallingConvention.Cdecl)]
        static extern UIntPtr g_union_info_get_alignment (IntPtr raw);

        public ulong Alignment {
            get {
                return (ulong)g_union_info_get_alignment (Handle);
            }
        }

        [DllImport ("libgirepository-1.0.dll", CallingConvention = CallingConvention.Cdecl)]
        static extern IntPtr g_union_info_get_discriminator (IntPtr raw, int index);

        ConstantInfo GetDiscriminator (int index)
        {
            IntPtr raw_ret = g_union_info_get_discriminator (Handle, index);
            return MarshalPtr<ConstantInfo> (raw_ret);
        }

        public IndexedCollection<ConstantInfo> Discriminators {
            get {
                return new IndexedCollection<ConstantInfo> (() => NFields, GetDiscriminator);
            }
        }

        [DllImport ("libgirepository-1.0.dll", CallingConvention = CallingConvention.Cdecl)]
        static extern int g_union_info_get_discriminator_offset (IntPtr raw);

        public int DiscriminatorOffset {
            get {
                return g_union_info_get_discriminator_offset (Handle);
            }
        }

        [DllImport ("libgirepository-1.0.dll", CallingConvention = CallingConvention.Cdecl)]
        static extern IntPtr g_union_info_get_discriminator_type (IntPtr raw);

        public TypeInfo DiscriminatorType {
            get {
                IntPtr raw_ret = g_union_info_get_discriminator_type (Handle);
                return MarshalPtr<TypeInfo> (raw_ret);
            }
        }

        [DllImport ("libgirepository-1.0.dll", CallingConvention = CallingConvention.Cdecl)]
        static extern IntPtr g_union_info_get_field (IntPtr raw, int index);

        public FieldInfo GetField (int index)
        {
            IntPtr raw_ret = g_union_info_get_field (Handle, index);
            return MarshalPtr<FieldInfo> (raw_ret);
        }

        [DllImport ("libgirepository-1.0.dll", CallingConvention = CallingConvention.Cdecl)]
        static extern IntPtr g_union_info_get_method (IntPtr raw, int index);

        public FunctionInfo GetMethod (int index)
        {
            IntPtr raw_ret = g_union_info_get_method (Handle, index);
            return MarshalPtr<FunctionInfo> (raw_ret);
        }

        [DllImport ("libgirepository-1.0.dll", CallingConvention = CallingConvention.Cdecl)]
        static extern int g_union_info_get_n_fields (IntPtr raw);

        protected int NFields {
            get {
                int raw_ret = g_union_info_get_n_fields (Handle);
                int ret = raw_ret;
                return ret;
            }
        }

        [DllImport ("libgirepository-1.0.dll", CallingConvention = CallingConvention.Cdecl)]
        static extern int g_union_info_get_n_methods (IntPtr raw);

        protected int NMethods {
            get {
                int raw_ret = g_union_info_get_n_methods (Handle);
                int ret = raw_ret;
                return ret;
            }
        }

        [DllImport ("libgirepository-1.0.dll", CallingConvention = CallingConvention.Cdecl)]
        static extern UIntPtr g_union_info_get_size (IntPtr raw);

        public ulong Size {
            get {
                UIntPtr raw_ret = g_union_info_get_size (Handle);
                ulong ret = (ulong)raw_ret;
                return ret;
            }
        }

        [DllImport ("libgirepository-1.0.dll", CallingConvention = CallingConvention.Cdecl)]
        static extern bool g_union_info_is_discriminated (IntPtr raw);

        public bool IsDiscriminated {
            get {
                bool raw_ret = g_union_info_is_discriminated (Handle);
                bool ret = raw_ret;
                return ret;
            }
        }

        public UnionInfo (IntPtr raw) : base (raw)
        {
        }
    }
}
