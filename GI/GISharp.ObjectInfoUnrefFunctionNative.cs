// This file was originally generated by the Gtk# (gapi3) code generator.
// It is now maintained by hand.

namespace GISharp
{

    using System;
    using System.Runtime.InteropServices;

#region Autogenerated code
    [UnmanagedFunctionPointer (CallingConvention.Cdecl)]
	internal delegate void ObjectInfoUnrefFunctionNative (IntPtr objekt);

    internal class ObjectInfoUnrefFunctionInvoker
    {

        ObjectInfoUnrefFunctionNative native_cb;
        IntPtr __data;
        GLib.DestroyNotify __notify;

        ~ObjectInfoUnrefFunctionInvoker ()
        {
            if (__notify == null)
                return;
            __notify (__data);
        }

        internal ObjectInfoUnrefFunctionInvoker (ObjectInfoUnrefFunctionNative native_cb) : this (native_cb, IntPtr.Zero, null)
        {
        }

        internal ObjectInfoUnrefFunctionInvoker (ObjectInfoUnrefFunctionNative native_cb, IntPtr data) : this (native_cb, data, null)
        {
        }

        internal ObjectInfoUnrefFunctionInvoker (ObjectInfoUnrefFunctionNative native_cb, IntPtr data, GLib.DestroyNotify notify)
        {
            this.native_cb = native_cb;
            __data = data;
            __notify = notify;
        }

        internal GI.ObjectInfoUnrefFunction Handler {
            get {
                return new GI.ObjectInfoUnrefFunction (InvokeNative);
            }
        }

        void InvokeNative (IntPtr objekt)
        {
            native_cb (objekt);
        }
    }

    internal class ObjectInfoUnrefFunctionWrapper
    {

        public void NativeCallback (IntPtr objekt)
        {
            try {
                managed (objekt);
                if (release_on_call)
                    gch.Free ();
            } catch (Exception e) {
                GLib.ExceptionManager.RaiseUnhandledException (e, false);
            }
        }

        bool release_on_call = false;
        GCHandle gch;

        public void PersistUntilCalled ()
        {
            release_on_call = true;
            gch = GCHandle.Alloc (this);
        }

        internal ObjectInfoUnrefFunctionNative NativeDelegate;
        GI.ObjectInfoUnrefFunction managed;

        public ObjectInfoUnrefFunctionWrapper (GI.ObjectInfoUnrefFunction managed)
        {
            this.managed = managed;
            if (managed != null)
                NativeDelegate = new ObjectInfoUnrefFunctionNative (NativeCallback);
        }

        public static GI.ObjectInfoUnrefFunction GetManagedDelegate (ObjectInfoUnrefFunctionNative native)
        {
            if (native == null)
                return null;
            ObjectInfoUnrefFunctionWrapper wrapper = (ObjectInfoUnrefFunctionWrapper)native.Target;
            if (wrapper == null)
                return null;
            return wrapper.managed;
        }
    }
#endregion
}
