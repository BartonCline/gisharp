// This file was originally generated by the Gtk# (gapi3) code generator.
// It is now maintained by hand.

namespace GI
{

    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Runtime.InteropServices;

#region Autogenerated code
    [StructLayout (LayoutKind.Explicit)]
    public partial struct Argument : IEquatable<Argument>
    {

        [FieldOffset (0)]
        public bool Boolean;
        [FieldOffset (0)]
        public sbyte Int8;
        [FieldOffset (0)]
        public byte UInt8;
        [FieldOffset (0)]
        public short Int16;
        [FieldOffset (0)]
        public ushort UInt16;
        [FieldOffset (0)]
        public int Int32;
        [FieldOffset (0)]
        public uint UInt32;
        [FieldOffset (0)]
        public long Int64;
        [FieldOffset (0)]
        public ulong UInt64;
        [FieldOffset (0)]
        public float Float;
        [FieldOffset (0)]
        public double Double;
        [FieldOffset (0)]
        public short Short;
        [FieldOffset (0)]
        public int Int;
        [FieldOffset (0)]
        public uint UInt;
        [FieldOffset (0)]
        private IntPtr v_long;

        public long Long {
            get {
                return (long)v_long;
            }
            set {
                v_long = new IntPtr (value);
            }
        }

        [FieldOffset (0)]
        private UIntPtr v_ulong;

        public ulong ULong {
            get {
                return (ulong)v_ulong;
            }
            set {
                v_ulong = new UIntPtr (value);
            }
        }

        [FieldOffset (0)]
        private IntPtr v_ssize;

        public long SSize {
            get {
                return (long)v_ssize;
            }
            set {
                v_ssize = new IntPtr (value);
            }
        }

        [FieldOffset (0)]
        private UIntPtr v_size;

        public ulong Size {
            get {
                return (ulong)v_size;
            }
            set {
                v_size = new UIntPtr (value);
            }
        }

        [FieldOffset (0)]
        private IntPtr _v_string;

        public string String {
            get {
                return MarshalG.Utf8PtrToString (_v_string);
            }
            set {
                var oldString = _v_string;
                _v_string = MarshalG.StringToUtf8Ptr (value);
                MarshalG.Free (oldString);
            }
        }

        [FieldOffset (0)]
        private IntPtr _v_pointer;

        public IntPtr Pointer {
            get { return _v_pointer; }
            set { _v_pointer = value; }
        }

        public static GI.Argument Zero = new GI.Argument ();

        public static GI.Argument New (IntPtr raw)
        {
            if (raw == IntPtr.Zero)
                return GI.Argument.Zero;
            return (GI.Argument)Marshal.PtrToStructure (raw, typeof(GI.Argument));
        }

        public bool Equals (Argument other)
        {
            return true && Boolean.Equals (other.Boolean) && Int8.Equals (other.Int8) && UInt8.Equals (other.UInt8) && Int16.Equals (other.Int16) && UInt16.Equals (other.UInt16) && Int32.Equals (other.Int32) && UInt32.Equals (other.UInt32) && Int64.Equals (other.Int64) && UInt64.Equals (other.UInt64) && Float.Equals (other.Float) && Double.Equals (other.Double) && Short.Equals (other.Short) && Int.Equals (other.Int) && UInt.Equals (other.UInt) && Long.Equals (other.Long) && ULong.Equals (other.ULong) && SSize.Equals (other.SSize) && Size.Equals (other.Size) && _v_string.Equals (other._v_string) && _v_pointer.Equals (other._v_pointer);
        }

        public override bool Equals (object other)
        {
            return other is Argument && Equals ((Argument)other);
        }

        public override int GetHashCode ()
        {
            return this.GetType ().FullName.GetHashCode () ^ Boolean.GetHashCode () ^ Int8.GetHashCode () ^ UInt8.GetHashCode () ^ Int16.GetHashCode () ^ UInt16.GetHashCode () ^ Int32.GetHashCode () ^ UInt32.GetHashCode () ^ Int64.GetHashCode () ^ UInt64.GetHashCode () ^ Float.GetHashCode () ^ Double.GetHashCode () ^ Short.GetHashCode () ^ Int.GetHashCode () ^ UInt.GetHashCode () ^ Long.GetHashCode () ^ ULong.GetHashCode () ^ SSize.GetHashCode () ^ Size.GetHashCode () ^ _v_string.GetHashCode () ^ _v_pointer.GetHashCode ();
        }

#endregion
    }
}
